# Do not modify - Generated with WorkflowForge
name: Publish npm
on:
  release:
    types:
      - published
jobs:
  publish:
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - uses: actions/setup-node@v4
        name: Setup Node.js
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - run: "corepack enable\n            corepack prepare pnpm@latest --activate"
        name: Enable Corepack and pnpm
      - run: pnpm install --frozen-lockfile=false
        name: Install dependencies
      - run: "pnpm run typecheck\n            pnpm run lint"
        name: Lint and typecheck
      - run: pnpm run build
        name: Build
      - run:
          "PKG_VERSION=$(node -p \"require('./package.json').version\")\n            TAG_NAME=\"${{ github.event.release.tag_name
          }}\"\n            echo \"package.json: v${PKG_VERSION} | tag: ${TAG_NAME}\"\n            if [ \"v${PKG_VERSION}\"\
          \ != \"${TAG_NAME}\" ]; then\n              echo \"Tag and package.json version mismatch\" >&2\n              exit
          1\n            fi"
        name: Verify tag matches package.json version
      - uses: actions/github-script@v7
        name: Require CI success
        with:
          script:
            "const sha = process.env.GITHUB_SHA;\nconst { owner, repo } = context.repo;\nconst res = await github.rest.actions.listWorkflowRuns({
            owner, repo, workflow_id: 'ci.yml', head_sha: sha, per_page: 1 });\nif (!res.data.workflow_runs.length) { core.setFailed(`No
            CI run found for SHA ${sha}`); return; }\nconst run = res.data.workflow_runs[0];\nif (run.status !== 'completed'
            || run.conclusion !== 'success') { core.setFailed(`CI not successful for ${sha}: status=${run.status} conclusion=${run.conclusion}`);
            }\n"
      - run:
          "if [ \"${{ matrix.node-version }}\" = \"22\" ]; then\n              echo \"//registry.npmjs.org/:_authToken=${{
          secrets.NPM_TOKEN }}\" > ~/.npmrc\n              npm publish --access public --provenance\n            else\n  \
          \            echo \"Skip publish on Node ${{ matrix.node-version }}\"\n            fi"
        name: Publish to npm (with provenance)
    strategy:
      matrix:
        node-version:
          - 22
          - 20
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
