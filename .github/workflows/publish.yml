# Do not modify - Generated with WorkflowForge
name: Publish npm

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm run security:check

      - name: Lint and typecheck
        run: |
          pnpm run typecheck
          pnpm run lint

      - name: Build package
        run: pnpm run build

      - name: Verify version matches tag
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "package.json: v${PKG_VERSION} | tag: ${TAG_NAME}"
          if [ "v${PKG_VERSION}" != "${TAG_NAME}" ]; then
            echo "❌ Tag and package.json version mismatch" >&2
            exit 1
          fi
          echo "✅ Version verification passed"

      - name: Verify CI success
        uses: actions/github-script@v7
        with:
          script: |
            const sha = process.env.GITHUB_SHA;
            const { owner, repo } = context.repo;
            const res = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id: 'ci.yml', head_sha: sha, per_page: 1
            });
            if (!res.data.workflow_runs.length) {
              core.setFailed(`No CI run found for SHA ${sha}`);
              return;
            }
            const run = res.data.workflow_runs[0];
            if (run.status !== 'completed' || run.conclusion !== 'success') {
              core.setFailed(`CI not successful for ${sha}: status=${run.status} conclusion=${run.conclusion}`);
            }
            console.log('✅ CI verification passed');

      - name: Publish to npm
        run: npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
