# Enhanced CodeQL Analysis - Multi-Language Security Scanning
name: CodeQL Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '17 8 * * 4' # Weekly on Thursday at 8:17 AM UTC
  workflow_dispatch:
    inputs:
      languages:
        description: 'Languages to analyze'
        required: false
        default: 'javascript-typescript'
        type: choice
        options:
          - 'javascript-typescript'
          - 'javascript-typescript,yaml'
          - 'all'

concurrency:
  group: codeql-analysis-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language:
          - 'javascript-typescript'
          - 'yaml'
        include:
          - language: 'javascript-typescript'
            build-mode: 'full'
          - language: 'yaml'
            build-mode: 'none'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: |
            security-and-quality
            security-extended
            security-and-quality,security-extended

      - name: Setup Node.js (for JavaScript/TypeScript)
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm (for JavaScript/TypeScript)
        if: matrix.language == 'javascript-typescript'
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies (for JavaScript/TypeScript)
        if: matrix.language == 'javascript-typescript'
        run: pnpm install --frozen-lockfile

      - name: Build project (for JavaScript/TypeScript)
        if: matrix.language == 'javascript-typescript'
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'
          upload: true

  # Custom queries for specific security patterns
  custom-security-analysis:
    name: Custom Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: |
            security-and-quality
            security-extended
            security-and-quality,security-extended

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Run custom security checks
        run: |
          echo "## Custom Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check for hardcoded secrets
          if grep -r "password\|secret\|key\|token" src/ --include="*.ts" --include="*.js" | grep -v "//" | grep -v "console.log"; then
            echo "| Hardcoded Secrets | ⚠️ Potential |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Hardcoded Secrets | ✅ Clean |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for console.log in production code
          if grep -r "console\.log\|console\.error\|console\.warn" src/ --include="*.ts" --include="*.js" | grep -v "//"; then
            echo "| Console Statements | ⚠️ Found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Console Statements | ✅ Clean |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for eval usage
          if grep -r "eval\|Function\|setTimeout.*string\|setInterval.*string" src/ --include="*.ts" --include="*.js"; then
            echo "| Dynamic Code Execution | ⚠️ Found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dynamic Code Execution | ✅ Clean |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript-typescript'
          upload: true

  # Dependency security analysis
  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "## Dependency Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check for vulnerabilities
          if pnpm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0'; then
            echo "| High/Critical Vulnerabilities | ❌ Found |" >> $GITHUB_STEP_SUMMARY
            pnpm audit --audit-level=high
          else
            echo "| High/Critical Vulnerabilities | ✅ None |" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for outdated dependencies
          if pnpm outdated | grep -q .; then
            echo "| Outdated Dependencies | ⚠️ Found |" >> $GITHUB_STEP_SUMMARY
            pnpm outdated
          else
            echo "| Outdated Dependencies | ✅ Up to date |" >> $GITHUB_STEP_SUMMARY
          fi

  # Summary job
  security-summary:
    name: Security Analysis Summary
    runs-on: ubuntu-latest
    needs: [analyze, custom-security-analysis, dependency-security]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Generate security summary
        run: |
          echo "## Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.analyze.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Custom Security | ${{ needs.custom-security-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Security | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.analyze.result }}" == "failure" || 
                "${{ needs.custom-security-analysis.result }}" == "failure" || 
                "${{ needs.dependency-security.result }}" == "failure" ]]; then
            echo "❌ One or more security analyses failed"
            exit 1
          else
            echo "✅ All security analyses completed successfully"
          fi
