# Enhanced Release Pipeline - Robust & Secure
name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options: ['auto', 'patch', 'minor', 'major', 'prerelease']

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  security-events: write

jobs:
  # Pre-release validation
  pre-release-checks:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Validate package
        run: |
          echo "## Package Validation" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check if package.json is valid
          if node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"; then
            echo "| package.json | ‚úÖ Valid |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| package.json | ‚ùå Invalid |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check if dist directory exists and has files
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "| dist directory | ‚úÖ Exists with files |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| dist directory | ‚ùå Missing or empty |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check if main files exist
          for file in "dist/index.js" "dist/cli.js" "dist/index.d.ts"; do
            if [ -f "$file" ]; then
              echo "| $file | ‚úÖ Exists |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $file | ‚ùå Missing |" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done

      - name: Check for breaking changes
        id: breaking-check
        run: |
          # Check if there are any breaking changes in the last commit
          if git log --oneline -1 | grep -i "breaking\|!:"; then
            echo "has-breaking-changes=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Breaking changes detected in commit message"
          else
            echo "has-breaking-changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No breaking changes detected"
          fi

      - name: Determine release type
        id: check
        run: |
          if [ "${{ github.event.inputs.release-type }}" != "auto" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=${{ github.event.inputs.release-type }}" >> $GITHUB_OUTPUT
            echo "Manual release requested: ${{ github.event.inputs.release-type }}"
          else
            # Check if there are changes since last release
            if git log --oneline $(git describe --tags --abbrev=0)..HEAD | grep -q .; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "release-type=auto" >> $GITHUB_OUTPUT
              echo "Changes detected since last release"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "release-type=none" >> $GITHUB_OUTPUT
              echo "No changes since last release"
            fi
          fi

  # Wait for CI completion
  # CI checks are already verified by branch protection rules
  # This workflow only runs after all required checks have passed

  # Security scan before release
  security-scan:
    name: Pre-Release Security Scan
    runs-on: ubuntu-latest
    needs: [pre-release-checks]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm security:audit
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check for high/critical vulnerabilities
          if pnpm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0'; then
            echo "| High/Critical Vulnerabilities | ‚ùå Found |" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è High or critical vulnerabilities found!"
            pnpm audit --audit-level=high
          else
            echo "| High/Critical Vulnerabilities | ‚úÖ None |" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ No high or critical vulnerabilities found"
          fi

  # Main release job
  release:
    name: Release
    needs: [pre-release-checks, security-scan]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: npm-prd
      url: https://www.npmjs.com/package/timonel
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Build for release
        run: pnpm run build

      - name: Verify build
        run: |
          echo "## Build Verification" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -exec sh -c 'echo "| $1 | $(du -h "$1" | cut -f1) |" >> $GITHUB_STEP_SUMMARY' _ {} \;

      - name: Test CLI functionality
        run: |
          echo "Testing CLI functionality..."
          node dist/cli.js --version
          node dist/cli.js --help
          echo "‚úÖ CLI tests passed"

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          if [ "${{ needs.pre-release-checks.outputs.release-type }}" == "auto" ]; then
            npx semantic-release
          else
            npx semantic-release --dry-run
            echo "Dry run completed. Manual release type: ${{ needs.pre-release-checks.outputs.release-type }}"
          fi

      - name: Post-release verification
        if: success()
        run: |
          echo "## Release Verification" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Package | ‚úÖ Published |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ‚úÖ Created |" >> $GITHUB_STEP_SUMMARY

  # Post-release notifications
  notify:
    name: Post-Release Notifications
    needs: [release]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "üéâ Release completed successfully!"
          echo "Check the release at: https://github.com/${{ github.repository }}/releases"

      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Please check the logs for details."
