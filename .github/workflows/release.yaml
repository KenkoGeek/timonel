# Release Pipeline with CI Status Validation
#
# This workflow validates that all required pipelines (Test Suite and CodeQL Analysis)
# have completed successfully before proceeding with the release.
#
name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip-ci-check:
        description: 'Skip CI validation (use with caution)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  security-events: write

jobs:
  check-ci-status:
    name: Validate CI Status
    runs-on: ubuntu-latest
    outputs:
      ci-valid: ${{ steps.validate.outputs.ci-valid }}
      commit-sha: ${{ steps.validate.outputs.commit-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Validate CI Status
        id: validate
        run: |
          # Get current commit SHA
          COMMIT_SHA="${{ github.sha }}"
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Skip CI check if manually triggered with skip flag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.skip-ci-check }}" = "true" ]; then
            echo "ci-valid=true" >> $GITHUB_OUTPUT
            echo "⚠️ CI validation skipped (manual trigger with skip flag)"
            exit 0
          fi

          echo "🔍 Validating CI status for commit: $COMMIT_SHA"

          # Function to check workflow status
          check_workflow_status() {
            local workflow_file="$1"
            local workflow_name="$2"
            local max_attempts=30
            local attempt=1
            
            echo "Checking $workflow_name status..."
            
            while [ $attempt -le $max_attempts ]; do
              # Get the latest run for this workflow
              local run_data=$(gh api repos/${{ github.repository }}/actions/workflows/$workflow_file/runs \
                --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\") | .conclusion" | head -1)
              
              if [ -n "$run_data" ] && [ "$run_data" != "null" ]; then
                if [ "$run_data" = "success" ]; then
                  echo "✅ $workflow_name completed successfully"
                  return 0
                elif [ "$run_data" = "failure" ] || [ "$run_data" = "cancelled" ]; then
                  echo "❌ $workflow_name failed or was cancelled"
                  return 1
                else
                  echo "⏳ $workflow_name status: $run_data (attempt $attempt/$max_attempts)"
                fi
              else
                echo "⏳ $workflow_name not found yet (attempt $attempt/$max_attempts)"
              fi
              
              if [ $attempt -lt $max_attempts ]; then
                sleep 10
                attempt=$((attempt + 1))
              else
                echo "❌ $workflow_name validation timeout after $max_attempts attempts"
                return 1
              fi
            done
            
            return 1
          }

          # Check Test Suite workflow
          if ! check_workflow_status "test.yaml" "Test Suite"; then
            echo "ci-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check CodeQL Analysis workflow
          if ! check_workflow_status "codeql.yaml" "CodeQL Analysis"; then
            echo "ci-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "ci-valid=true" >> $GITHUB_OUTPUT
          echo "🎉 All CI workflows completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    needs: check-ci-status
    if: needs.check-ci-status.outputs.ci-valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: npm-prd
      url: https://www.npmjs.com/package/timonel
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Build for release
        run: pnpm run build

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: npx semantic-release
