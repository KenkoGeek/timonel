# Optimized Test Suite - Enhanced Performance & Reliability
name: Test Suite

on:
  push:
    branches: [main, develop, 'chore/*', 'feat/*', 'fix/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      node-version:
        description: 'Node.js version to test'
        required: false
        default: '20'
        type: choice
        options: ['20', '22']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast feedback job - runs first
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint check
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

  # Comprehensive testing matrix
  test-matrix:
    name: Test Matrix (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
        include:
          - node-version: 20
            test-type: 'unit'
          - node-version: 22
            test-type: 'integration'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.cache/
          key: build-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            build-${{ matrix.node-version }}-
            build-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: pnpm test:integration
        env:
          NODE_ENV: test

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: pnpm test:integration
        env:
          NODE_ENV: test

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Validate helm charts
        run: |
          if [ -d "temp-test/umbrella-write/" ]; then
            helm lint temp-test/umbrella-write/
          else
            echo "No helm charts to validate"
          fi

      - name: Generate coverage report
        run: pnpm test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: ${{ matrix.test-type }}-tests
          name: ${{ matrix.test-type }}-tests-node-${{ matrix.node-version }}
          fail_ci_if_error: false

  # Security and quality checks
  security-quality:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Security audit
        run: pnpm security:audit
        continue-on-error: true

      - name: Security linting
        run: pnpm security:lint

      - name: Markdown linting
        run: pnpm md:lint

      - name: Dependency check
        run: pnpm deps:check
        continue-on-error: true

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Measure bundle size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -exec sh -c 'echo "| $1 | $(du -h "$1" | cut -f1) |" >> $GITHUB_STEP_SUMMARY' _ {} \;

      - name: Performance test
        run: |
          echo "Running performance tests..."
          time pnpm build
          echo "Build completed in: $SECONDS seconds"

  # Final validation
  validate-all:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [test-matrix, security-quality]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Check all job results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security & Quality | ${{ needs.security-quality.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test-matrix.result }}" == "failure" || 
                "${{ needs.security-quality.result }}" == "failure" ]]; then
            echo "❌ One or more test jobs failed"
            exit 1
          else
            echo "✅ All tests passed successfully"
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "🚨 Test suite failed! Please check the logs for details."
