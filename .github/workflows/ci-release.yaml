name: CI & Release

on:
  push:
    branches:
      - main
      - develop
      - 'chore/*'
      - 'feat/*'
      - 'fix/*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      target:
        description: Publish target (npm-beta|npm-prd)
        required: true
        default: npm-beta
        type: choice
        options:
          - npm-beta
          - npm-prd

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Test Suite (Node ${{ matrix.node_version }} / ${{ matrix.test_type }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - node_version: 20
            test_type: unit
            test_command: pnpm test:unit
            run_coverage: true
          - node_version: 22
            test_type: integration
            test_command: pnpm test:integration
            run_coverage: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint check
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Build project
        run: pnpm build

      - name: Run ${{ matrix.test_type }} tests
        run: ${{ matrix.test_command }}
        env:
          NODE_ENV: test

      - name: Generate coverage report
        if: matrix.run_coverage == true
        run: pnpm test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        if: matrix.run_coverage == true
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: ${{ matrix.test_type }}-tests
          name: ${{ matrix.test_type }}-tests-node-${{ matrix.node_version }}
          fail_ci_if_error: false

  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Security audit
        run: pnpm security:audit
        continue-on-error: true

      - name: Security lint
        run: pnpm security:lint

      - name: Markdown lint
        run: pnpm md:lint

      - name: Dependency check
        run: pnpm deps:check
        continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs:
      - test
      - security
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Pack npm artifact
        run: |
          mkdir -p artifact
          pnpm pack --pack-destination artifact

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-artifacts
          path: |
            artifact/
            dist/

  publish-beta:
    name: Publish npm Beta
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'npm-beta'))
    timeout-minutes: 20
    environment:
      name: npm-beta
      url: https://www.npmjs.com/package/timonel?activeTab=versions
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Publish prerelease with semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: npx semantic-release

  publish-prd:
    name: Publish npm Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'npm-prd'))
    timeout-minutes: 20
    environment:
      name: npm-prd
      url: https://www.npmjs.com/package/timonel
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: 'pnpm'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Publish release with semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: npx semantic-release
